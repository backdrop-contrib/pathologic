<?php
// $Id$

/**
 * Pathologic text filter for Drupal
 * by Garrett Albright
 * 
 * Pleasant sounds you won't find in a record store:
 * Back to Winnipeg by Fatblueman
 *   http://www.fatblueman.net/
 * A Terrible Flood by esselfortium
 *   http://sl4.poned.com/
 */

// Possible new feature: Check for absolute URIs within the current Drupal
// installation (because that's what people will get when they copy URLs from
// links) and convert them to relative URIs so that the filter handles them
// properly when things move to another domain. (Use hook_nodeapi()?) This may
// be a bad idea (it's considerably more Drupal-ic to mangle data on output, not
// on input), but it will make things a little more idiot-proof.

/**
 * Implementation of hook_filter().
 */

function pathologic_filter($op, $delta = 0, $format = -1, $text = ""){
	if ($op === "process" && $text !== "") {
		if (variable_get("filter_pathologic_href_{$format}", TRUE)) {
			// Transform href attributes.
			// The e modifier in preg_replace's RegEx lets us "replace" a match with
			// the result of some eval'd code. I didn't know about this when I first
			// built Pathologicâ€¦ This is more efficient than the way I was doing it,
			// which was to build arrays of matches and replacements and run them
			// through str_replace. (At least, it's more efficient if you interpret
			// fewer loc to mean higher efficiency.)
			// HOWEVER, since D5's url() function interprets a blank string as meaning
			// that the anchor fragment should just simply be "#", we need to do this
			// twice; once for URIs with anchor fragments, and once for those without
			// them, so that those without them won't suddenly gain them.
			$text = preg_replace('|href="([^/][^#:"]+)#([^:"]*)"|e',
				"'href=\"' . url(\"$1\", NULL, \"$2\", TRUE) . '\"'",
				$text);
			$text = preg_replace('|href="([^/][^#:"]+)"|e',
				"'href=\"' . url(\"$1\", NULL, NULL, TRUE) . '\"'",
				$text);
			// Wow, what a trip.
		}
		if (variable_get("filter_pathologic_src_{$format}", TRUE)) {
			global $base_url;
			// The RegEx for this is simpler because we don't have to worry about
			// anchor fragments. That is to say, they could be in the attribute, but
			// they don't need to be separated out. We don't need to use the e
			// modifier here -- just PHP's built-in string building.
			$text = preg_replace('|src="([^/][^:"]+)"|', "src=\"{$base_url}/$1\"", $text);
		}
		return $text;
	}
	if ($op === "list") {
		return array(t('Pathologic'));
	}
	if ($op === "description") {
		return t("Simplifies linking to other pages in a Drupal installation so that links will always point to the correct page.");
	}
	if ($op === "settings") {
		return array('filter_pathologic' => array(
	    '#type' => 'fieldset',
	    '#title' => t('Pathologic'),
	    '#collapsible' => TRUE,
 			"filter_pathologic_href_{$format}" => array(
				'#type' => "checkbox",
				'#title' => t("Transform values of <em>href</em> attributes"),
				'#default_value' => intval(variable_get("filter_pathologic_href_{$format}", 1)),
				'#description' => t("<em>href</em> attributes are used in link tags."),
			),
 			"filter_pathologic_src_{$format}" => array(
				'#type' => "checkbox",
				'#title' => t("Transform values of <em>src</em> attributes"),
				'#default_value' => intval(variable_get("filter_pathologic_src_{$format}", 1)),
				'#description' => t("<em>src</em> attributes are used in image tags and tags for other types of embedded media."),
			),
		));
	}
	return $text;
}

/**
 * Implementation of hook_filter_tips().
 */

function pathologic_filter_tips($delta = 0, $format = -1, $long = TRUE) {
	if ($long) {
		return t("<p>Pathologic will automatically find links using non-absolute URIs in text and format them properly for the Drupal installation it is running on. That way, you can just enter links like <tt>&lt;a href=&quot;page/foo&quot;&gt;</tt> and Pathologic will auotmatically convert it to <tt>&lt;a href=&quot;!corrected&gt;</tt>. Should circumstances of this Drupal's installation or its data change &mdash; the data is moved to another server, or Clean URLs are toggled &mdash; the URIs will adjust themselves so that they will always be correct.</p><p>Note that Pathologic will ignore paths with a slash as the first character, and all absolute URIs.</p>", array('!corrected' => url("page/foo", NULL, NULL, variable_get("filter_pathologic_abs_{$format}", TRUE))));
	}
	return t("Relative links to other pages in this Drupal installation will be properly formatted by Pathologic.");
}