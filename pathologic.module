<?php
// $Id$

/**
 * Pathologic text filter for Drupal
 * by Garrett Albright
 *
 * Pathologic is a text filter which allows one to link to other pages on a
 * Drupal installation in such a way that the links will always point to the
 * correct page, even if Clean URLs are toggled, the data is moved to a
 * different server (perhaps from a testing server to a production one), the
 * subdirectory of the Drupal installation changes, etc. Pathologic does not
 * require any new tags or special characters, and is designed to work
 * seamlessly with any other text filters you are using.
 */

// Possible new feature: Check for absolute URIs within the current Drupal
// installation (because that's what people will get when they copy URLs from
// links) and convert them to relative URIs so that the filter handles them
// properly when things move to another domain. (Use hook_nodeapi()?) This may
// be a bad idea (it's considerably more Drupal-ic to mangle data on output, not
// on input), but it will make things a little more idiot-proof.

/**
 * Implementation of hook_filter().
 */

function pathologic_filter($op, $delta = 0, $format = -1, $text = ""){
	if ($op === "process" && $text !== "") {
		// We can't just do a preg_replace() here because we need to run the url()
		// function on all the matches.
		if (preg_match_all('|href="([^/][^#:"]+)#?([^:"]*)"|', $text, $matches) == 0) {
			// Either no matches were found (0 was returned) or there was an error of
			// some sort (FALSE was returned, which evaluates to 0).
			return $text;
		}
		// Now, $matches[0][$x] matches the $x-th entire pattern;
		// $matches[1][$x] matches the $x-th path without the anchor part;
		// $matches[2][$x] matches the $x-th anchor part (if any), or an empty
		// string.
		
		$rep_from = array();
		$rep_to = array();
		$mcount = count($matches[0]);
		for ($x = 0; $x < $mcount; $x++) {
			$rep_from[] = $matches[0][$x];
			$rep_to[] = 'href="' . url($matches[1][$x], array(
				'external' => FALSE,
				'fragment' => $matches[2][$x], // it's okay if this is an empty string
				'absolute' => variable_get("filter_pathologic_abs_{$format}", TRUE),
				)) . '"';
			// NOTE NOTE NOTE: D5 url() expects a series of parameters;
			// D6 url() expects an associative array.
		}
		return str_replace($rep_from, $rep_to, $text);
	}
	if ($op === "list") {
		return array(t('Pathologic'));
	}
	if ($op === "description") {
		return t("Simplifies linking to other pages in a Drupal installation so that links will always point to the correct page.");
	}
	if ($op === "settings") {
		return array('filter_pathologic' => array(
	    '#type' => 'fieldset',
	    '#title' => t('Pathologic'),
	    '#collapsible' => TRUE,
			"filter_pathologic_abs_{$format}" => array(
				'#type' => "checkbox",
				'#title' => t("Always use absolute paths"),
				'#default_value' => intval(variable_get("filter_pathologic_abs_{$format}", 1)),
				'#description' => t("If checked, Pathologic will format its outputted URIs as absolute paths. Unchecking this box (so paths are formatted as relative paths) will lead to slightly smaller page sizes, but if your content is being sent out through a feed or syndicated in some other way, you should keep it checked."),
			),
		));
	}
	return $text;
}

/**
 * Implementation of hook_filter_tips().
 */

function pathologic_filter_tips($delta = 0, $format = -1, $long = TRUE) {
	if ($long) {
		return t("<p>Pathologic will automatically find links using non-absolute URIs in text and format them properly for the Drupal installation it is running on. That way, you can just enter links like <tt>&lt;a href=&quot;page/foo&quot;&gt;</tt> and Pathologic will auotmatically convert it to <tt>&lt;a href=&quot;!corrected&gt;</tt>. Should circumstances of this Drupal's installation or its data change &mdash; the data is moved to another server, or Clean URLs are toggled &mdash; the URIs will adjust themselves so that they will always be correct.</p><p>Note that Pathologic will ignore paths with a slash as the first character, and all absolute URIs.</p>", array('!corrected' => url("page/foo", array(
		'external' => FALSE,
		'absolute' => variable_get("filter_pathologic_abs_{$format}", TRUE),
		))));
	}
	return t("Relative links to other pages in this Drupal installation will be properly formatted by Pathologic.");
}